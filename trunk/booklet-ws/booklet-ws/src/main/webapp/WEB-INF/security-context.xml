<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xmlns:beans="http://www.springframework.org/schema/beans"
        xmlns:jdbc="http://www.springframework.org/schema/jdbc"
        xmlns:context="http://www.springframework.org/schema/context"
        xmlns:mvc="http://www.springframework.org/schema/mvc"
        xsi:schemaLocation="
        http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/security
        http://www.springframework.org/schema/security/spring-security-3.2.xsd
        http://www.springframework.org/schema/jdbc
        http://www.springframework.org/schema/jdbc/spring-jdbc-4.0.xsd
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context-4.0.xsd
        http://www.springframework.org/schema/mvc 
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">    
        
<!--<http auto-config="true">     
    <intercept-url pattern="/services/sample/list" access="ROLE_ADMIN"/>
    <intercept-url pattern="/services/sample/listJson" access="ROLE_ADMIN"/>  
    <intercept-url pattern="/services/sample/addSample" access="ROLE_ADMIN"/>
    <logout logout-url="/logout"  />  
    <http-basic/>
    </http>-->
 
    <!-- Creates the springSecurityFilterChain with the customer filter customRestFilter injected. -->
    <http create-session="stateless" entry-point-ref="authenticationEntryPoint" 
          authentication-manager-ref="authenticationManager">
        <custom-filter ref="customRestFilter" position="BASIC_AUTH_FILTER" />
        <intercept-url pattern="/services/user/register" access="IS_AUTHENTICATED_ANONYMOUSLY"/>
        <intercept-url pattern="/**" access="ROLE_ADMIN" />
    </http>
    
    <!-- The authenticationEntryPoint allows us to customise to start the authentication process 
         (i.e. bring up the dialog box when no header is present)
         The realmName will be displayed in the dialog box, hence not wise to put the username and
         password in it.
    -->
    <beans:bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint">
        <beans:property name="realmName" value="Username: jack Password: jill" />
    </beans:bean>
    
    <!-- Our customer Basic Authentication Filter. This can be replaced with what ever authentication process you wish -->
    <beans:bean id="customRestFilter" class="com.fagose.booklet.security.filter.CustomRestSecurityFilter">
        <beans:constructor-arg name="authenticationManager" ref="authenticationManager" />
    </beans:bean>
    
    <authentication-manager alias="authenticationManager">
        <authentication-provider ref="restAuthenticationProvider" />
    </authentication-manager>
    
    <!-- The restAuthenticationProvider is the class responsible for verifying that the username 
         and password are valid and returning an AuthenticationToken matching the user requesting 
         the resource and the user's access level.
         This is the place where you would normally hook into a more complex authentication system 
         and user data layer. -->
    <beans:bean  id="restAuthenticationProvider" class="com.fagose.booklet.security.authentication.provider.RestAuthenticationProvider"  />
 
 <!--<authentication-manager>
     
    <authentication-provider>
        
	<jdbc-user-service data-source-ref="dataSource"
	users-by-username-query="select UserEmail,Password,Enabled from User where UserEmail=?"
	authorities-by-username-query="select u.UserEmail, a.roleName from User u, userroles a where a.UserID = u.UserID and u.UserEmail =? " />
	
	</authentication-provider>
	
    </authentication-manager>-->

</beans:beans>